import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers

## Data ##

def f(x1,x2):
    return x1 + x2

x1 = np.array(np.linspace(0,10,100))
x2 = np.array(np.linspace(0,10,100))
xs = np.stack((x1,x2),1)
y = np.array(f(x1,x2))

## Model ##

model = tf.keras.Sequential([tf.keras.layers.Dense(512,activation='relu',input_shape=[2]),
                            tf.keras.layers.Dense(512,activation='relu'),
                            tf.keras.layers.Dense(512,activation='relu'),
                            tf.keras.layers.Dense(1)])

model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.1),loss='mean_squared_error')

print(model.summary())


history = model.fit(xs, y, epochs=100)

hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
print(hist.tail())

#print('test loss = ',test_loss)

x1_test = np.array(np.linspace(-5,15,200))
x2_test = np.array(np.linspace(-5,15,200))
xs_test = np.stack((x1_test,x2_test),1)
y_test = np.array(f(x1_test,x2_test))

test_loss = model.evaluate(xs_test,  y_test, verbose=2)

predictions = model.predict(xs_test)

#plt.plot(history.history['loss'], label='loss')
plt.plot(x1_test, y_test, color = 'k', label = 'Data')
plt.plot(x1_test, predictions, label = 'Predictions')
#plt.scatter(x1_test, y_test, color = 'm')
plt.title(f'512+512+512 nodes, loss = {test_loss}')
plt.legend()
plt.show()

#model.save('sum_model')