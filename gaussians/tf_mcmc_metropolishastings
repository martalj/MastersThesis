import tensorflow as tf
import tensorflow_probability as tfp
import matplotlib.pyplot as plt
import numpy as np

def L(params):
    x1, x2 = params
    return 1/(2.4*np.pi)*tf.math.exp(-1/2*(((x1-2)/0.3)**2 + ((x2-8)/4)**2)) + 1/(0.32*np.pi)*tf.math.exp(-1/2*(((x1-7)/1)**2 + ((x2-12)/0.16)**2))

def logL(params):
    return tf.math.log(L(params))


hmc = tfp.mcmc.MetropolisHastings(
    tfp.mcmc.UncalibratedHamiltonianMonteCarlo(
        target_log_prob_fn=logL,
        step_size=0.5,
        num_leapfrog_steps=3))

states = tfp.mcmc.sample_chain(
    num_results=10000,
    num_burnin_steps=1000,
    current_state=tf.constant([2.,8.]),
    kernel=hmc,
    trace_fn=None)

sample_mean = tf.reduce_mean(states[:,0], axis=0)
print(sample_mean)

sample_mean2 = tf.reduce_mean(states[:,1], axis=0)
print(sample_mean2)

plt.hist(states[:,0], 100, histtype = 'step')
plt.show()

plt.hist(states[:,1], 100, histtype = 'step')
plt.show()