import tensorflow as tf
import tensorflow_probability as tfp
import numpy as np
import matplotlib.pyplot as plt
import time

import collections
collections.Iterable = collections.abc.Iterable

def L(params):
    x1, x2 = params
    return 1/(2.4*np.pi)*tf.math.exp(-1/2*(((x1-2)/0.3)**2 + ((x2-8)/4)**2)) + 1/(0.32*np.pi)*tf.math.exp(-1/2*(((x1-7)/1)**2 + ((x2-12)/0.16)**2))

def logL(params):
    return tf.math.log(L(params))

def logL2(params):
    x1,x2 = params
    z = tf.math.log(1/(2.4*np.pi)*tf.math.exp(-1/2*(((x1-2)/0.3)**2 + ((x2-8)/4)**2))+1/(0.32*np.pi)*tf.math.exp(-1/2*(((x1-7)/1)**2 + ((x2-12)/0.16)**2)))
    if z < -100:
        z = tf.math.log(1/(2.4*np.pi))*(-1/2*(((x1-2)/0.3)**2 + ((x2-8)/4)**2)) + tf.math.log(1/(0.32*np.pi))*(-1/2*(((x1-7)/1)**2 + ((x2-12)/0.16)**2))
    return z

num_results = int(100)
num_burnin_steps = int(100)
num_chains = 10
num_params = 2

start = time.time()
adaptive_hmc = tfp.mcmc.SimpleStepSizeAdaptation(
    tfp.mcmc.HamiltonianMonteCarlo(
        target_log_prob_fn=logL2,
        num_leapfrog_steps=3,
        step_size=0.5),
    num_adaptation_steps=int(num_burnin_steps * 0.8))

# Run the chain (with burn-in).
#@tf.function
def run_chain():
  # Run the chain (with burn-in).
  #current_state = tf.random.uniform([num_params],-10.,20.)
  current_state = tf.constant([1.5,6.5])
  samples, is_accepted = tfp.mcmc.sample_chain(
      num_results=num_results,
      num_burnin_steps=num_burnin_steps,
      current_state=current_state,
      kernel=adaptive_hmc,
      trace_fn=lambda _, pkr: pkr.inner_results.is_accepted)

  sample_mean0 = tf.reduce_mean(samples[:,0])
  sample_stddev0 = tf.math.reduce_std(samples[:,0])
  sample_mean1 = tf.reduce_mean(samples[:,1])
  sample_stddev1 = tf.math.reduce_std(samples[:,1])
  is_accepted = tf.reduce_mean(tf.cast(is_accepted, dtype=tf.float32))
  #return sample_mean0, sample_stddev0, sample_mean1, sample_stddev1, is_accepted, samples
  return samples

#sample_mean0, sample_stddev0, sample_mean1, sample_stddev1, is_accepted, samples = run_chain()
chains = [run_chain() for i in range(num_chains)]
end = time.time()

samples = np.array([sample.numpy() for sample in chains])
samples = tf.reshape(samples, [num_results*num_chains,num_params])

# print('mean0:{:.4f}  stddev0:{:.4f}  acceptance:{:.4f}'.format(
#     sample_mean0.numpy(), sample_stddev0.numpy(), is_accepted.numpy()))
# print('mean1:{:.4f}  stddev1:{:.4f}  acceptance:{:.4f}'.format(
#     sample_mean1.numpy(), sample_stddev1.numpy(), is_accepted.numpy()))
# print(f"Time take: {end-start}")


plt.hist(samples[num_burnin_steps:,0], 100, histtype = 'step')
plt.xlabel(r"$\theta_1$")
plt.ylabel(r"$p(\theta_1)$")
plt.gca().set_yticks([])
plt.show()

plt.hist(samples[num_burnin_steps:,1],100, histtype = 'step')
plt.xlabel(r"$\theta_2$")
plt.ylabel(r"$p(\theta_2)$")
plt.gca().set_yticks([])
plt.show()
